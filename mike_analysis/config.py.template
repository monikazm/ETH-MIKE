ENABLE_MULTICORE = True

# Polybox upload directory
# (on your local file system, where the polybox client synchronizes the directory with the uploaded results)
# This should point to the 'study name' directory, which contains the 'Session Results' and 'Database Backups' subdirectories
PATH_TO_POLYBOX_UPLOAD_DIR = r'C:\Path\To\Polybox\DataUploadFileDropDir\StudyName'

# Data directory
# This should be the directory where the frontend tdms and csv logs on this pc are saved / where the zips from Polybox upload dir should be extracted to
# This directory normally contains subdirectories with the subject names
PATH_TO_DATA_ROOT_DIR = r'C:\Users\SomeUser\Desktop\StudyName'

# If not set, mike_analysis will try to use:
# a) The path supplied as an argument to the mike_analysis script
# b) The latest database found in '$PATH_TO_POLYBOX_UPLOAD_DIR\Database Backups' (only if USE_DB_FROM_UPLOAD_DIR is set to True)
# c) The file db.db in the current directory
DB_PATH = r''
USE_DB_FROM_UPLOAD_DIR = True

IMPORT_ASSESSMENTS = {'$ALL_MODES'}

# If True, this script will download all data from redcap whenever it is run
REDCAP_IMPORT = False
REDCAP_URL = 'https://redcap.ethz.ch/api/'

# Put your API token here
RECAP_API_TOKEN = ''

REDCAP_RECORD_IDENTIFIER = 'study_id'
REDCAP_EXCLUDED_COLS = {'gender', 'handedness', 'impaired_side', 'details_on_stroke', 'date_mri', 'lesion_location_detailed'}
REDCAP_NAMES_AND_INDEX_COLS = {
    'demographics_5760': ('Demographics', ['subject_code']),
    'clinical_assessments': ('ClinicalAssessment', []),
    'robotic_assessments': ('RoboticAssessment', ['robotic_session_number']),
    'neurophysiology': ('Neurophysiology', []),
}


def create_additional_views(migrator, metric_names):
    """In this function you can create additional views in the output database if needed."""

    if REDCAP_IMPORT:
        patient_cols = migrator.out_get_all_columns_except('Patient', ('SubjectNr', 'PatientId'))
        demo_cols = migrator.out_get_all_columns_except('Demographics', [REDCAP_RECORD_IDENTIFIER, 'subject_code'])

        # Create additional views
        impaired_view_name = 'ImpairedAssessment'
        create_stmt = f'''
            CREATE VIEW {impaired_view_name} AS
                SELECT ROW_NUMBER() OVER (PARTITION BY {REDCAP_RECORD_IDENTIFIER} ORDER BY robotic_session_number ASC) AS IthSession, *
                FROM RoboticAssessment
                LEFT JOIN ClinicalAssessment USING({REDCAP_RECORD_IDENTIFIER}, redcap_event_name)
                LEFT JOIN Neurophysiology USING({REDCAP_RECORD_IDENTIFIER}, redcap_event_name)
                WHERE measured_hand___1 IS TRUE
        '''
        migrator.create_or_replace_table_index_or_view_from_stmt(impaired_view_name, create_stmt)

        non_impaired_view_name = 'NonImpairedAssessment'
        create_stmt = f'''
            CREATE VIEW {non_impaired_view_name} AS
                SELECT ROW_NUMBER() OVER (PARTITION BY {REDCAP_RECORD_IDENTIFIER} ORDER BY robotic_session_number ASC) AS IthSession, *
                FROM RoboticAssessment
                LEFT JOIN ClinicalAssessment USING({REDCAP_RECORD_IDENTIFIER}, redcap_event_name)
                LEFT JOIN Neurophysiology USING({REDCAP_RECORD_IDENTIFIER}, redcap_event_name)
                WHERE measured_hand___2 IS TRUE
        '''
        migrator.create_or_replace_table_index_or_view_from_stmt(non_impaired_view_name, create_stmt)

        data_impaired_view_name = 'DataImpaired'
        create_stmt = f'''
            CREATE VIEW {data_impaired_view_name} AS
                SELECT R.SubjectNr, R.PatientId, R.LeftHand, D.{REDCAP_RECORD_IDENTIFIER}, IthSession,
                    {f", ".join([f"R.{patient_column}" for patient_column in patient_cols])},
                    {f", ".join([f"D.{demo_col}" for demo_col in demo_cols])},
                    I.*,
                    {metric_names}
                FROM SessionResult AS R
                LEFT JOIN Demographics AS D ON(D.subject_code == R.SubjectNr)
                LEFT JOIN {impaired_view_name} AS I USING({REDCAP_RECORD_IDENTIFIER}, IthSession)
                WHERE (R.LeftHand AND R.LeftImpaired) OR (NOT R.LeftHand AND R.RightImpaired)
        '''
        migrator.create_or_replace_table_index_or_view_from_stmt(data_impaired_view_name, create_stmt)

        data_non_impaired_view_name = 'DataNonImpaired'
        create_stmt = f'''
            CREATE VIEW {data_non_impaired_view_name} AS
                SELECT R.SubjectNr, R.PatientId, R.LeftHand, D.{REDCAP_RECORD_IDENTIFIER}, IthSession,
                    {f", ".join([f"R.{patient_column}" for patient_column in patient_cols])},
                    {f", ".join([f"D.{demo_col}" for demo_col in demo_cols])},
                    I.*,
                    {metric_names}
                FROM SessionResult AS R
                LEFT JOIN Demographics AS D ON(D.subject_code == R.SubjectNr)
                LEFT JOIN {non_impaired_view_name} AS I USING({REDCAP_RECORD_IDENTIFIER}, IthSession)
                WHERE (R.LeftHand AND NOT R.LeftImpaired) OR (NOT R.LeftHand AND NOT R.RightImpaired)
        '''
        migrator.create_or_replace_table_index_or_view_from_stmt(data_non_impaired_view_name, create_stmt)

        name = 'DataFull'
        create_stmt = f'''
            CREATE VIEW {name} AS
                SELECT *
                FROM {data_impaired_view_name}
                UNION ALL
                SELECT *
                FROM {data_non_impaired_view_name}
                ORDER BY SubjectNr, LeftHand, IthSession
        '''
        migrator.create_or_replace_table_index_or_view_from_stmt(name, create_stmt)
